{"version":3,"sources":["serviceWorker.js","components/ThemeProvider.js","components/Button.js","components/Buttons.js","util/calculate.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","ThemeContext","React","createContext","ThemeProvider","state","theme","changeToLightTheme","_this","setState","changeToDarkTheme","react_default","a","createElement","Provider","value","Object","objectSpread","this","props","children","Component","Button","_ref","label","onButtonClick","wide","Consumer","_ref2","type","className","concat","onClick","defaultProps","Buttons","isScientificModeOn","toggleScientificMode","react","components_Button","calculate","operand1","operand2","operator","o1","o2","toString","alert","simpleOperatorsList","numbers","scientificOperatorsList","initialState","leftOperand","rightOperand","displayValue","App","handleButtonClick","e","_this$state","buttonValue","target","includes","result","Math","pow","sqrt","NaN","_this2","ThemeProvider_ThemeProvider","Buttons_Buttons","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aad5941e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nconst ThemeContext = React.createContext();\n\nexport default class ThemeProvider extends React.Component {\n  state = {\n    theme: \"light\"\n  };\n\n  changeToLightTheme = () => {\n    this.setState({\n      theme: 'light'\n    });\n  }\n\n  changeToDarkTheme = () => {\n    this.setState({\n      theme: 'dark'\n    });\n  }\n\n  render() {\n    return (\n      <ThemeContext.Provider value={{\n        ...this.state,\n        changeToLightTheme: this.changeToLightTheme,\n        changeToDarkTheme: this.changeToDarkTheme\n      }}>\n        {this.props.children}\n      </ThemeContext.Provider>\n    )\n  }\n}\n\nexport { ThemeContext };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ThemeContext } from \"./ThemeProvider\";\nimport \"../styles/button.css\";\n\nfunction Button({ label, onButtonClick, value, wide }) {\n  return (\n    <ThemeContext.Consumer>\n      {({ theme }) => (\n        <button type=\"button\" className={`${theme}-btn ${wide ? 'btn-wide' : 'btn'}`} value={value} onClick={onButtonClick}>{label}</button>\n      )}\n    </ThemeContext.Consumer>\n  );\n}\n\nButton.propTypes = {\n  label: PropTypes.string.isRequired,\n  onButtonClick: PropTypes.func.isRequired,\n  value: PropTypes.string,\n  wide: PropTypes.bool\n}\n\nButton.defaultProps = {\n  value: null,\n  wide: false\n}\n\nexport default Button;\n","import React, { Fragment } from \"react\";\nimport { ThemeContext } from \"./ThemeProvider\";\nimport Button from \"./Button\";\n\nexport default class Buttons extends React.Component {\n  state = {\n    isScientificModeOn: true\n  };\n\n  toggleScientificMode = () => {\n    this.setState({\n      isScientificModeOn: !this.state.isScientificModeOn\n    });\n  }\n\n  render() {\n    const { onButtonClick } = this.props;\n\n    return (\n      <Fragment>\n        <div>\n          <Button label=\"1\" value=\"1\" onButtonClick={onButtonClick} />\n          <Button label=\"2\" value=\"2\" onButtonClick={onButtonClick} />\n          <Button label=\"3\" value=\"3\" onButtonClick={onButtonClick} />\n          <Button label=\"Add(+)\" value=\"+\" wide onButtonClick={onButtonClick} />\n          <Button label=\"Scientific\" value=\"Scientific\" wide onButtonClick={this.toggleScientificMode} />\n        </div>\n        <div>\n          <Button label=\"4\" value=\"4\" onButtonClick={onButtonClick} />\n          <Button label=\"5\" value=\"5\" onButtonClick={onButtonClick} />\n          <Button label=\"6\" value=\"6\" onButtonClick={onButtonClick} />\n          <Button label=\"Substract(-)\" value=\"-\" wide onButtonClick={onButtonClick} />\n          {this.state.isScientificModeOn && <Button label=\"+/-\" value=\"sign\" wide onButtonClick={onButtonClick} /> }\n        </div>\n        <div>\n          <Button label=\"7\" value=\"7\" onButtonClick={onButtonClick} />\n          <Button label=\"8\" value=\"8\" onButtonClick={onButtonClick} />\n          <Button label=\"9\" value=\"9\" onButtonClick={onButtonClick} />\n          <Button label=\"Multiply(*)\" value=\"*\" wide onButtonClick={onButtonClick} />\n          {this.state.isScientificModeOn && <Button label=\"^\" value=\"^\" wide onButtonClick={onButtonClick} /> }\n        </div>\n        <div>\n          <Button label=\"Clear\" value=\"clear\" onButtonClick={onButtonClick} />\n          <Button label=\"0\" value=\"0\" onButtonClick={onButtonClick} />\n          <Button label=\"=\" value=\"=\" onButtonClick={onButtonClick} />\n          <Button label=\"Divide(/)\" value=\"/\" wide onButtonClick={onButtonClick} />\n          {this.state.isScientificModeOn && <Button label=\"√\" value=\"√\" wide onButtonClick={onButtonClick} /> }\n        </div>\n        <ThemeContext.Consumer>\n          {({ changeToLightTheme, changeToDarkTheme }) => (\n            <div>\n              <Button label=\"Light mode\" value=\"light\" wide onButtonClick={changeToLightTheme} />\n              <Button label=\"Dark mode\" value=\"dark\" wide onButtonClick={changeToDarkTheme} />\n            </div>\n          )}\n        </ThemeContext.Consumer>\n      </Fragment>\n    );\n  }\n}\n","export default function(operand1, operand2, operator) {\n const o1 = +operand1;\n const o2 = +operand2;\n\n switch(operator) {\n   case \"+\" :\n     return (o1 + o2).toString();\n   case \"-\":\n     return (o1 - o2).toString();\n   case \"*\" :\n     return (o1 * o2).toString();\n   case \"/\":\n     if (o2 === 0) {\n       alert(\"Can't divide by zero.\");\n       return \"0\";\n     }\n\n     return (o1 / o2).toString();\n   default:\n     return \"0\";\n  }\n}\n","import React, { Component } from \"react\";\nimport Buttons from \"./Buttons\";\nimport ThemeProvider, { ThemeContext } from \"./ThemeProvider\";\nimport calculate from \"../util/calculate\";\nimport \"../styles/app.css\";\n\nconst simpleOperatorsList = [ \"+\", \"-\", \"*\", \"/\" ];\nconst numbers = [ \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ];\nconst scientificOperatorsList = [ \"sign\", \"^\", \"√\" ];\n\nconst initialState = {\n  leftOperand: \"\",\n  rightOperand: \"\",\n  operator: \"\",\n  displayValue: \"\"\n};\n\nexport default class App extends Component {\n  state = initialState;\n\n  handleButtonClick = (e) => {\n    const { leftOperand, rightOperand, operator, displayValue } = this.state;\n\n    const buttonValue = e.target.value;\n\n    if (scientificOperatorsList.includes(buttonValue) && displayValue && +displayValue) {\n      switch (buttonValue) {\n        case \"sign\": {\n          const result = (-1 * +displayValue).toString();\n\n          if (operator) {\n            this.setState({\n              displayValue: result,\n              rightOperand: result\n            });\n          } else {\n            this.setState({\n              leftOperand: result,\n              displayValue: result\n            });\n          }\n        } break;\n        case \"^\": {\n          const result = ((+displayValue) ** 2).toString();\n\n          this.setState({\n            leftOperand: \"\",\n            displayValue: result,\n            rightOperand: \"\",\n            operator: \"\"\n          });\n        } break;\n        case \"√\": {\n          const result = Math.sqrt(+displayValue).toString();\n\n          this.setState({\n            leftOperand: \"\",\n            displayValue: result,\n            rightOperand: \"\",\n            operator: \"\"\n          });\n\n        } break;\n        default:\n      }\n\n      return;\n    }\n\n    if (simpleOperatorsList.includes(buttonValue)) {\n      if (operator && leftOperand && rightOperand) {\n        const result = calculate(leftOperand, rightOperand, operator);\n\n        this.setState({\n          leftOperand: result,\n          rightOperand: \"\",\n          operator: buttonValue,\n          displayValue: result\n        });\n      } else if (leftOperand) {\n        this.setState({\n          operator: buttonValue\n        });\n      }\n\n      return;\n    }\n\n    if (numbers.includes(buttonValue)) {\n      if (operator) {\n        if ([0, NaN].includes(+rightOperand)) {\n          this.setState({\n            rightOperand: buttonValue,\n            displayValue: buttonValue\n          });\n        } else {\n          const result = [0, NaN].includes(+rightOperand) ? buttonValue : rightOperand + buttonValue;\n\n          this.setState({\n            rightOperand: result,\n            displayValue: result\n          });\n        }\n      } else {\n        const result = [0, NaN].includes(+leftOperand) ? buttonValue : leftOperand + buttonValue;\n\n        this.setState({\n          leftOperand: result,\n          displayValue: result\n        });\n      }\n\n      return;\n    }\n\n    if (buttonValue === \"=\" && leftOperand && rightOperand && operator) {\n      const result = calculate(leftOperand, rightOperand, operator);\n\n      this.setState({\n        leftOperand: result,\n        rightOperand: \"\",\n        operator: \"\",\n        displayValue: result\n      });\n\n      return;\n    }\n\n    if (buttonValue === \"clear\") {\n      this.setState(initialState);\n    }\n  }\n\n  render() {\n    return (\n      <ThemeProvider>\n        <ThemeContext.Consumer>\n          {({ theme }) => (\n            <div className={`${theme}-page page`}>\n              <div className= {`${theme}-display display`}>{this.state.displayValue}</div>\n              <Buttons onButtonClick={this.handleButtonClick} />\n            </div>\n          )}\n        </ThemeContext.Consumer>\n      </ThemeProvider>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}