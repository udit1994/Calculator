{"ast":null,"code":"var _jsxFileName = \"/Users/udit/Projects/Work/calculator-app/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Buttons from \"./Buttons\";\nimport Themes from \"./Themes\";\nimport ThemeProvider, { ThemeContext } from \"./ThemeProvider\";\nimport calculate from \"../util/calculate\";\nimport \"../styles/app.css\";\nconst simpleOperatorsList = [\"+\", \"-\", \"*\", \"/\"];\nconst numbers = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\nconst scientificOperatorsList = [\"sign\", \"^\", \"√\"];\nconst initialState = {\n  leftOperand: \"\",\n  rightOperand: \"\",\n  operator: \"\",\n  displayValue: \"\"\n};\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n\n    this.handleButtonClick = e => {\n      const _this$state = this.state,\n            leftOperand = _this$state.leftOperand,\n            rightOperand = _this$state.rightOperand,\n            operator = _this$state.operator,\n            displayValue = _this$state.displayValue;\n      const buttonValue = e.target.value;\n\n      if (scientificOperatorsList.includes(buttonValue) && displayValue && +displayValue) {\n        switch (buttonValue) {\n          case \"sign\":\n            {\n              const result = (-1 * +displayValue).toString();\n\n              if (operator) {\n                this.setState({\n                  displayValue: result,\n                  rightOperand: result\n                });\n              } else {\n                this.setState({\n                  leftOperand: result,\n                  displayValue: result\n                });\n              }\n            }\n            break;\n\n          case \"^\":\n            {\n              const result = ((+displayValue) ** 2).toString();\n              this.setState({\n                leftOperand: \"\",\n                displayValue: result,\n                rightOperand: \"\",\n                operator: \"\"\n              });\n            }\n            break;\n\n          case \"√\":\n            {\n              const result = Math.sqrt(+displayValue).toString();\n              this.setState({\n                leftOperand: \"\",\n                displayValue: result,\n                rightOperand: \"\",\n                operator: \"\"\n              });\n            }\n            break;\n\n          default:\n        }\n\n        return;\n      }\n\n      if (simpleOperatorsList.includes(buttonValue)) {\n        if (operator && leftOperand && rightOperand) {\n          const result = calculate(leftOperand, rightOperand, operator);\n          this.setState({\n            leftOperand: result,\n            rightOperand: \"\",\n            operator: buttonValue,\n            displayValue: result\n          });\n        } else if (leftOperand) {\n          this.setState({\n            operator: buttonValue\n          });\n        }\n\n        return;\n      }\n\n      if (numbers.includes(buttonValue)) {\n        if (operator) {\n          if ([0, NaN].includes(+rightOperand)) {\n            this.setState({\n              rightOperand: buttonValue,\n              displayValue: buttonValue\n            });\n          } else {\n            const result = [0, NaN].includes(+rightOperand) ? buttonValue : rightOperand + buttonValue;\n            this.setState({\n              rightOperand: result,\n              displayValue: result\n            });\n          }\n        } else {\n          const result = [0, NaN].includes(+leftOperand) ? buttonValue : leftOperand + buttonValue;\n          this.setState({\n            leftOperand: result,\n            displayValue: result\n          });\n        }\n\n        return;\n      }\n\n      if (buttonValue === \"=\" && leftOperand && rightOperand && operator) {\n        const result = calculate(leftOperand, rightOperand, operator);\n        this.setState({\n          leftOperand: result,\n          rightOperand: \"\",\n          operator: \"\",\n          displayValue: result\n        });\n        return;\n      }\n\n      if (buttonValue === \"clear\") {\n        this.setState(initialState);\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(ThemeProvider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(ThemeContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, ({\n      theme\n    }) => React.createElement(\"div\", {\n      className: \"\".concat(theme, \"-page page\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"\".concat(theme, \"-display display\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, this.state.displayValue), React.createElement(Buttons, {\n      onButtonClick: this.handleButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(Themes, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/Users/udit/Projects/Work/calculator-app/src/components/App.js"],"names":["React","Component","Buttons","Themes","ThemeProvider","ThemeContext","calculate","simpleOperatorsList","numbers","scientificOperatorsList","initialState","leftOperand","rightOperand","operator","displayValue","App","state","handleButtonClick","e","buttonValue","target","value","includes","result","toString","setState","Math","sqrt","NaN","render","theme"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Buttons from \"./Buttons\";\nimport Themes from \"./Themes\";\nimport ThemeProvider, { ThemeContext } from \"./ThemeProvider\";\nimport calculate from \"../util/calculate\";\nimport \"../styles/app.css\";\n\nconst simpleOperatorsList = [ \"+\", \"-\", \"*\", \"/\" ];\nconst numbers = [ \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ];\nconst scientificOperatorsList = [ \"sign\", \"^\", \"√\" ];\n\nconst initialState = {\n  leftOperand: \"\",\n  rightOperand: \"\",\n  operator: \"\",\n  displayValue: \"\"\n};\n\nexport default class App extends Component {\n  state = initialState;\n\n  handleButtonClick = (e) => {\n    const { leftOperand, rightOperand, operator, displayValue } = this.state;\n\n    const buttonValue = e.target.value;\n\n    if (scientificOperatorsList.includes(buttonValue) && displayValue && +displayValue) {\n      switch (buttonValue) {\n        case \"sign\": {\n          const result = (-1 * +displayValue).toString();\n\n          if (operator) {\n            this.setState({\n              displayValue: result,\n              rightOperand: result\n            });\n          } else {\n            this.setState({\n              leftOperand: result,\n              displayValue: result\n            });\n          }\n        } break;\n        case \"^\": {\n          const result = ((+displayValue) ** 2).toString();\n\n          this.setState({\n            leftOperand: \"\",\n            displayValue: result,\n            rightOperand: \"\",\n            operator: \"\"\n          });\n        } break;\n        case \"√\": {\n          const result = Math.sqrt(+displayValue).toString();\n\n          this.setState({\n            leftOperand: \"\",\n            displayValue: result,\n            rightOperand: \"\",\n            operator: \"\"\n          });\n\n        } break;\n        default:\n      }\n\n      return;\n    }\n\n    if (simpleOperatorsList.includes(buttonValue)) {\n      if (operator && leftOperand && rightOperand) {\n        const result = calculate(leftOperand, rightOperand, operator);\n\n        this.setState({\n          leftOperand: result,\n          rightOperand: \"\",\n          operator: buttonValue,\n          displayValue: result\n        });\n      } else if (leftOperand) {\n        this.setState({\n          operator: buttonValue\n        });\n      }\n\n      return;\n    }\n\n    if (numbers.includes(buttonValue)) {\n      if (operator) {\n        if ([0, NaN].includes(+rightOperand)) {\n          this.setState({\n            rightOperand: buttonValue,\n            displayValue: buttonValue\n          });\n        } else {\n          const result = [0, NaN].includes(+rightOperand) ? buttonValue : rightOperand + buttonValue;\n\n          this.setState({\n            rightOperand: result,\n            displayValue: result\n          });\n        }\n      } else {\n        const result = [0, NaN].includes(+leftOperand) ? buttonValue : leftOperand + buttonValue;\n\n        this.setState({\n          leftOperand: result,\n          displayValue: result\n        });\n      }\n\n      return;\n    }\n\n    if (buttonValue === \"=\" && leftOperand && rightOperand && operator) {\n      const result = calculate(leftOperand, rightOperand, operator);\n\n      this.setState({\n        leftOperand: result,\n        rightOperand: \"\",\n        operator: \"\",\n        displayValue: result\n      });\n\n      return;\n    }\n\n    if (buttonValue === \"clear\") {\n      this.setState(initialState);\n    }\n  }\n\n  render() {\n    return (\n      <ThemeProvider>\n        <ThemeContext.Consumer>\n          {({ theme }) => (\n            <div className={`${theme}-page page`}>\n              <div className= {`${theme}-display display`}>{this.state.displayValue}</div>\n              <Buttons onButtonClick={this.handleButtonClick} />\n              <Themes />\n            </div>\n          )}\n        </ThemeContext.Consumer>\n      </ThemeProvider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}